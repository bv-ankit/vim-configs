" Vim filetype plugin file
" Language:     Ruby
" Maintainer:   Ned Konz <ned@bike-nomad.com>
" Last Change:  $Date: 2002/08/01 18:10:44 $
" $Id: ruby.vim,v 1.8 2002/08/01 18:10:44 ned Exp $
" Current version is at http://bike-nomad.com/vim
"
" To suppress loading of this plugin, just do this
" in your .vimrc:
" let loaded_ruby_ftplugin = 1

if exists("b:did_ftplugin") | finish | endif
if exists("loaded_ruby_ftplugin") | finish | endif

let b:did_ftplugin = 1

" Make sure the continuation lines below do not cause problems in
" compatibility mode.
let s:save_cpo = &cpo
set cpo&vim

" Set this once, globally.
if !exists("rubypath")
  if executable("ruby")
    if &shellxquote == "'"
      let rubypath = system('ruby -e "print $:.join(%q{,})"' )
    else
      let rubypath = system("ruby -e 'print $:.join(%q{,})'" )
    endif
    let rubypath = substitute(rubypath,',.$',',,','')
  else
    " If we can't call ruby to get its path, just default to using the
    " current directory and the directory of the current file.
    let rubypath = ".,,"
  endif
endif
let &l:path=rubypath

" Set 'formatoptions' to break comment lines but not other lines,
" and insert the comment leader when hitting <CR> or using "o".
setlocal fo-=t fo+=croql
setlocal include=^\\s*\\<\\(load\\\|require\\)\\>
setlocal includeexpr=substitute(substitute(v:fname,'::','/','g'),'$','.rb','')
setlocal iskeyword=48-57,_,A-Z,a-z,:
setlocal comments=:#
setlocal define=^\\s*
setlocal suffixesadd=.rb

" The problem with the usual tag browsing is that it doesn't know about
" namespaces. i.e. ABC::def and def may be the same thing.
map <buffer><unique><silent> <C-]> :exec ":tag /".expand("<cword>")<CR>

" Change the browse dialog on Win32 or Motif to show mainly Ruby-related files
if (has("gui_win32") || has("gui_motif")) && !exists("b:browsefilter")
  let b:browsefilter = "Ruby Source Files (*.rb)\t*.rb\n" .
                     \ "All Files (*.*)\t*.*\n"
endif

" Matchit support:
if exists("loaded_matchit")
  if !exists("b:match_words")
    let b:match_ignorecase = 0
    let b:match_words =
\ '\%(\%(\%(^\|[;=]\)\s*\)\@<=\%(class\|module\|while\|begin\|until\|for\|if\|unless\|def\|case\)\|\<do\)\>:' .
\ '\<\%(else\|elsif\|ensure\|rescue\|when\)\>:\%(^\|[^.]\)\@<=\<end\>'
  endif
endif
" \%(\%(^\|[;=]\)\s*\)\@<=
"
let &cpo = s:save_cpo

set notimeout
set smartindent
set smarttab
set autoindent
set shiftwidth=2

noremap <buffer> K :!ruby %<CR>

nnoremap <buffer> <F1> :if strpart(getline(1),0,21) !='#!/usr/local/bin/ruby'<CR>0put ='#!/usr/local/bin/ruby'<CR>put =''<CR>endif<CR>:if getline(3) != ""<CR>1put =''<CR>endif<CR><Space>3Gi

inoremap <buffer> ;; ;
inoremap <buffer> ;e <CR><BS>end
inoremap <buffer> ;h <Space>=><Space>

inoremap <buffer> " <C-R>=<SID>Double('"','"')<CR>
inoremap <buffer> ` <C-R>=<SID>Double('`','`')<CR>
inoremap <buffer> ' <C-R>=<SID>Double("\'","\'")<CR>
inoremap <buffer> ( ()<Left>
inoremap <buffer> [ <C-R>=<SID>Double("[","]")<CR>
inoremap <buffer> { <C-R>=<SID>Double("{","}")<CR>

function! s:Double(left,right)
    if strpart(getline(line(".")),col(".")-2,2) == a:left . a:right
	return "\<Del>"
    else
	return a:left . a:right . "\<Left>"
    endif
endfunction

vnoremap <buffer> `[ <C-C>`>a]<Esc>`<i[<Esc>
vnoremap <buffer> `( <C-C>`>a)<Esc>`<i(<Esc>
vnoremap <buffer> `{ <C-C>`>a}<Esc>`<i{<Esc>
vnoremap <buffer> `" <C-C>`>a"<Esc>`<i"<Esc>
vnoremap <buffer> `` <C-C>`>a`<Esc>`<i`<Esc>

noremap <buffer> <C-Del> :call <SID>DeleteBrackets()<CR>

function! s:DeleteBrackets()
   let c = getline(line("."))[col(".") - 1]
   if c =~ '{[('
      normal %r ``x
   elseif c =~ '}])'
      normal %%x``r ``
   elseif c == '"'
      exe "normal x/\"\<CR>x``"
   endif
endfunction

" The following macros automatically insert complete various ruby items.

noremap <buffer> <C-Del> :call <SID>DeleteBrackets()<CR>

" To defuse the abbreviations.
inoremap <buffer> <C-Space> <C-V><Space>

inoremap <buffer> \| <C-R>=<SID>DoubleBars()<CR>
function! s:DoubleBars()
    if strpart(getline(line(".")),0,col(".")-2) =~ '[/#]'
	return "\|"
    else
	return "\|\|\<Left>"
    endif
endfunction

iab <buffer> def <C-R>=<SID>SpecialAbbrev("def")<CR>

iab <buffer> for <C-R>=<SID>For()<CR>
iab <buffer> if <C-R>=<SID>SpecialAbbrev("if")<CR>
iab <buffer> case <C-R>=<SID>Case()<CR>
iab <buffer> class <C-R>=<SID>SpecialAbbrev("class")<CR>
iab <buffer> module <C-R>=<SID>SpecialAbbrev("module")<CR>
iab <buffer> unless <C-R>=<SID>SpecialAbbrev("unless")<CR>
iab <buffer> until <C-R>=<SID>SpecialAbbrev("until")<CR>
iab <buffer> while <C-R>=<SID>SpecialAbbrev("while")<CR>

function! s:SpecialAbbrev(string)
    if getline(line(".")) =~ '\S'  " Not a blank line.
	return a:string
    else 
	return a:string . "\<CR>end\<Esc>kA"
    endif
endfunction

function! s:For()
    if getline(line(".")) =~ '\S'  " Not a blank line.
	return "for"
    else 
	return "for in \<CR>end\<Esc>k$3hi"
    endif
endfunction

function! s:Case()
    return "case\<Esc>owhen \<Esc>oend\<Esc>2kA"
endfunction

nmap <C-\>q <Esc>:!./%<CR>
set tabstop=2
set tag=/usr/local/lib/ruby/1.8/tags
